#+title: Doom Emacs Config
#+author: Nathan Sharp (@nazzacode)
#+description: Nathans Personal Doom Emacs config.
#+startup: num
#+options: toc:2

* Table of Contents :toc:
:PROPERTIES:
:UNNUMBERED:
:END:
- [[#user-info][User Info]]
- [[#general][General]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#writeroom-mode][Writeroom Mode]]
  - [[#-emojis-emojify][ðŸ™‚ Emojis (~emojify~)]]
- [[#org-mode][Org-Mode]]
  - [[#org-ref][Org-ref]]
  - [[#headings][Headings]]
  - [[#org-babel-src-blocks][Org-Babel (src blocks)]]
  - [[#org-roam][Org-roam]]
  - [[#org-roam-bibtex-orb][Org-roam-bibtex (ORB)]]
  - [[#helm-bibtex][Helm-bibtex]]
  - [[#org-noter][Org-noter]]
  - [[#org-pomodoro][Org-pomodoro]]
  - [[#tables][Tables]]
- [[#treemacs][Treemacs]]
- [[#novel-rubbish][Nov.el (Rubbish)]]
- [[#latex][Latex]]
- [[#misc][Misc]]
- [[#flycheck-fix-ugly-icon][Flycheck fix ugly icon]]
- [[#disable-org-fancy-priorities][disable ~org-fancy-priorities~]]
- [[#load-org-appear][load ~org-appear~]]
- [[#set-a-more-complete-unicode-font][set a more complete unicode font]]

* User Info
#+BEGIN_SRC elisp
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; For GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Nathan Sharp"
      my-name "nazzacode"
      user-mail-address "nasharp@outlook.com")
#+END_SRC

* General
#+begin_src elisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

* UI
#+begin_src elisp
(setq display-line-numbers-type 'relative  ; or `nil'
      header-line-format " "              ; header padding
      fringe-mode 'default)
#+end_src

** Theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-dark+)  ; FIXME Breaks Latex fragments background

;;(setq doom-dark+-padded-modeline nil)
#+END_SRC

** Fonts
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Agave Nerd Font Mono")     ; Agave Nerd Font Mono
      doom-variable-pitch-font (font-spec :family "ETBookOT")
      doom-unicode-font (font-spec :family "Symbola")          ; good unicode support
      ;; doom-big-font (font-spec :family "Fira Mono" :size 19))
      ;; doom-variable-pitch-font (font-spec :family "TSCu_Comic")
)
#+END_SRC

** Modeline
#+begin_src elisp
(custom-set-faces!
    '(mode-line :family "Terminus" :height 1.0)
    '(mode-line-inactive :family "Terminus" :height 1.0))

(setq doom-modeline-height 9)

;; TODO move to top aka `header-line-format'
;; (setq header-line-format mode-line-format)
;; (setq mode-line-format nil)
;; FIXME Not loading on start and breaking writeroom
#+end_src

** Writeroom Mode
#+begin_src elisp
;; TODO increase font less
(setq writeroom-mode-line t)
#+end_src

** ðŸ™‚ Emojis (~emojify~)
#+begin_src elisp
(setq emojify-emoji-set "emojione-v2.2.6") ; increase resolution from default "emojione-v2.2.6-22"
#+end_src

* Org-Mode
#+begin_src elisp
(add-hook! 'org-mode-hook 'org-appear-mode)

(after! org
  (add-hook! 'org-mode-hook #'+org-pretty-mode
                            #'mixed-pitch-mode)  ; uses var-pitch font for text
  ;; (add-hook! 'org-mode-hook 'org-num-mode)   ; numbered headings
  (setq org-directory "~/org"             ; dir for agenda etc.
        org-num-skip-unnumbered t               ; skip `:UNNUMBERED:` from onumbering
        org-ellipsis " ï„‡ "
        display-line-numbers-type 'nil
        hl-line-mode 'nil
        org-startup-with-inline-images 't
        org-startup-with-latex-preview 't
        org-startup-shrink-all-tables 't
        org-startup-folded 'fold))

;; Multiline Emphasis
;; FIXME casuing depreciated errors?
;; (setcar (nthcdr 4 org-emphasis-regexp-components) 10)
;;(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
#+end_src

** Org-ref
#+begin_src emacs-lisp
(require 'doi-utils)

(setq reftex-default-bibliography '("~/org/roam/bibliography.bib"))

;; see org-ref for use of these variables
(setq org-ref-default-bibliography '("~/org-roam/bibliography.bib")
      org-ref-bibliography-notes "~/org/roam/"   ; TODO not in use
      org-ref-pdf-directory "~/org/roam/PDFs/"
      org-ref-completion-library 'org-ref-ivy-cite
      org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
      org-ref-bibliography-notes "~/org/roam"
      org-ref-notes-directory "~/org/roam"
      org-ref-notes-function 'orb-edit-notes)
#+end_src

** Headings
#+begin_src elisp
(custom-set-faces!
  '(outline-1 :weight semi-bold  :height 1.12)
  '(outline-2 :weight semi-bold  :height 1.08)
  '(outline-3 :weight semi-bold  :height 1.05)
  '(outline-4 :weight semi-bold  :height 1.03)
  '(outline-5 :weight normal     :height 1.02)
  '(outline-6 :weight normal     :height 1.01)
  '(outline-7 :weight normal)
  '(outline-8 :weight normal)
  '(org-document-title :height 1.2))
#+end_src

** Org-Babel (src blocks)
#+begin_src elisp
;; Typescript
(org-babel-do-load-languages
  'org-babel-load-languages
    '((typescript . t)
      (jupyter . t)))

;; (require 'typescript-mode)
;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
;; (require 'tide)

(defun org-babel-execute:typescript (body params)
  (let ((org-babel-js-cmd "npx ts-node < "))
    (org-babel-execute:js body params)))

(defalias 'org-babel-execute:ts 'org-babel-execute:typescript) ; FIXME
#+end_src

***  Jupyter
#+begin_src elisp
; this seems to add syntax-highlighting to jupyter-python and jupyter-typescript blocks
(after! org-src
  (dolist (lang '(python typescript jupyter))
  (cl-pushnew (cons (format "jupyter-%s" lang) lang)
                org-src-lang-modes :key #'car))

  ;;(org-babel-jupyter-override-src-block "python") ;; alias all python to jupyter-python
  ;;(org-babel-jupyter-override-src-block "typescript") ;; alias all python to jupyter-python
 )

;; TypeScript
(setq org-babel-default-header-args:jupyter-typescript '(
  (:session . "ts")
  (:kernel . "tslab")))

;; Python
(setq org-babel-default-header-args:jupyter-python '(
   (:session . "py")
   (:kernel . "python")))
#+end_src

** Org-roam
See: [[https://www.orgroam.com/manual.html][org-roam manual]]
#+begin_src elisp
(add-to-list 'exec-path "/usr/bin/sqlite3")
(add-hook 'after-init-hook 'org-roam-mode)   ; start on start-up
(setq org-roam-directory "~/org/roam")       ; set org-roam dir
(setq org-roam-tag-sources '(prop all-directories))
#+end_src

*** Org Roam Capture Templates
#+begin_src elisp
(setq org-roam-capture-templates
    '(("d" "default" plain (function org-roam--capture-get-point)
        "%?"
        :file-name "%<%Y%m%d%H%M%S>-${slug}"
        :head
"#+title: ${title}
,#+roam_tags:"
        :unnarrowed t)

    ("c" "Code Challange" plain (function org-roam--capture-get-point)
        "%?"
        :file-name "codeChallanges/%<%Y%m%d%H%M%S>-${slug}"
        :head
"#+title: ${title}
,#+roam_tags: code-challange
:PROPERTIES:
:Source:
:END:

\n* Question
\n** Example
~Input: ~
~Output: ~
"
        :unnarrowed t)
))

;; TODO Note
;; TODO Code Challange
#+end_src

** Org-roam-bibtex (ORB)
#+begin_src elisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref) ; optional: if Org Ref is not loaded anywhere else, load it here

  (setq orb-preformat-keywords
      '("citekey" "title" "url" "author-or-editor" "keywords" "file")
      orb-process-file-keyword t
      orb-file-field-extensions '("pdf"))
  ;; (setq orb-preformat-keywords
  ;; '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
    '(("r" "ref" plain (function org-roam-fapture--get-point)
     ""
     :file-name "${slug}"
     :head "#+TITLE: ${citekey}: ${title}\n#+roam_key: ${ref}\n#+roam_tags:

- keywords :: ${keywords}

\n* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:END:"
     :unnarrowed t))))
#+end_src

** Helm-bibtex
#+begin_src emacs-lisp
(after! org
    (setq bibtex-completion-bibliography "~/org/roam/bibliography.bib"
          bibtex-completion-library-path "~/org/roam/PDFs/"
          bibtex-completion-notes-path "~/org/roam/"))
#+end_src

** Org-noter
#+begin_src elisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq org-noter-always-create-frame nil))  ; stop opening frames
#+end_src

** TODO Org-pomodoro

** Tables
#+begin_src elisp
(add-hook 'org-mode-hook #'valign-mode)
(setq valign-fancy-bar 'non-nil)
#+end_src

* Treemacs
;; (after! treemacs
;;   (setq doom-themes-treemacs-enable-variable-pitch nil)) ; TODO try '

* Nov.el (Rubbish)
* Latex
#+begin_src elisp
;; FIXME Latex fragments in org mode
(setq org-format-latex-options
  (list
        ;; :foreground 'default  ;;auto
        ;; :background 'auto
        :scale 3.0              ;; bigger latex fragment
        ;; :html-foreground "Black"
        ;; :html-background "Transparent"
        ;; :html-scale 1.0
        :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

* Misc
#+BEGIN_SRC elisp
(setq lisp-indent-offset 2)
#+END_SRC

* TODO Flycheck fix ugly icon
* TODO disable ~org-fancy-priorities~
* TODO load ~org-appear~
* TODO set a more complete unicode font
