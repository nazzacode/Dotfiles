#+TITLE: Doom Emacs Config
#+AUTHOR: Nathan Sharp (@nazzacode)
#+DESCRIPTION: Nathan's (@nazzacode's) Personal Doom Emacs config.
#+FILETAGS: emacs config dotfiles
#+PROPERTY: header-args :results silent :comments link :tangle yes
#+STARTUP: folded hideblocks nohide
* COMMENT Inbox
#+begin_src elisp
(custom-set-variables
 '(package-archives
   (quote
    (("gnu" . "https://elpa.gnu.org/packages/")
     ("ox-odt" . "https://kjambunathan.github.io/elpa/")))))

(use-package dom)
(use-package org-extra-emphasis)
     #+end_src
     
* Global Configuration
** FIXME Lexical binding
Harness the performance advantages of lexical-binding (I think?). See:
  1. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][GNU: Lexical Binding]]
  2. [[https://nullprogram.com/blog/2017/01/30/][How to Write Fast(er) Emacs Lisp]]
#+BEGIN_SRC elisp :tangle no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

** Better defaults
#+BEGIN_src elisp :tangle yes
(setq initial-major-mode 'org-mode
      image-use-external-converter t
      lisp-indent-offset 2)
#+END_src

** User info
"For GOG configuration, email clients, file templates and snippets." - Doom Emacs
#+BEGIN_SRC elisp :tangle yes
(setq user-full-name "Nathan Sharp"
      my-name "nazzacode"
      user-mail-address "nasharp@outlook.com")
#+END_SRC
#
* User Interface (UI) :UI:
** General
#+begin_src elisp :tangle yes
(setq-default word-wrap t)
              ;; line-spacing 0.15)
(setq display-line-numbers-type t         ; 'relative  ; or `nil'
      +ivy-buffer-preview t               ; preview buffer on switch
      emojify-emoji-set "emojione-v2.2.6" ; increase resolution from default "emojione-v2.2.6-22"
      emojify-display-style 'unicode
      large-file-warning-threshold nil)
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode) ; don't highlight the line
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode) ; icons in dired
#+end_src

** Fringes
#+begin_src elisp :tangle yes
;; ;;; Fringes
;; (add-hook! 'doom-init-ui-hook (fringe-mode '20)) ; FIXME very not loading on startup
;; (setq fringe-mode '('4  . '8)) ; FIXME very not loading on startup
;; (set-fringe-mode nil)
#+end_src

** Theme
#+BEGIN_SRC elisp :tangle yes
;; Dark
;; (setq doom-theme 'my-doom-dark+)
;; (setq doom-theme 'my-doom-one)
;; (setq doom-theme 'my-doom-gruvbox)
;; Light
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-zenburn)
;; (setq doom-theme 'doom-nord-light)
;; (setq doom-theme 'modus-operandi)
(setq doom-theme 'modus-vivendi)
#+END_SRC

** Modus themes
#+begin_src elisp tangle yes
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "modus theme" "t" #'modus-themes-toggle))
#+end_src

** Fonts
#+begin_src elisp :tangle yes
;; FIXME breaks scaling
(setq
  doom-font (font-spec :family "DM Mono" :size 28) ;; ! `doom-big-mode' breaks when `:size'`
  ;; doom-font (font-spec :family "Hasklug Nerd Font Mono" :size 26 :height 1.0)
  ;; doom-font (font-spec :family "Agave Nerd Font Mono")
  ;; doom-font (font-spec :family "Cousine Nerd Font Mono" ) ;; TODO size
  ;; doom-font (font-spec :family "Noto Sans")
  ;; doom-font (font-spec :family "Source Sans Pro")
  ;; doom-variable-pitch-font (font-spec :family "ETBookOT")
  doom-variable-pitch-font (font-spec :family "Source Sans Pro")
  doom-serif-font (font-spec :family "ETBookOT")
  ;; doom-variable-pitch-font (font-spec :family "Iosevka Aile") ; :size 32 :height 1.5)
  ;; doom-variable-pitch-font (font-spec :family "TSCu_Comic")
  doom-unicode-font (font-spec :family "Symbola")          ; good unicode support (prev :size 30)
  ;; doom-big-font (font-spec :family "Fira Mono" :size 19))
)
;; text zoom in/out ammount
(setq text-scale-mode-step 1.05)

;; (set-face-attribute 'fixed-pitch nil :family "DM Mono" :inherit 'default)
#+end_src

** Transparency :fn:
#+begin_src elisp :tangle yes
;; ;; background only transparency (Emacs 29)
;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
;;(set-frame-parameter (selected-frame) 'alpha <both>)
;;; Emacs 28
(set-frame-parameter (selected-frame) 'alpha 85) ; 93
(add-to-list 'default-frame-alist '(alpha . 85)) ; 93

(defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (set-frame-parameter
     nil 'alpha
     (if (eql (cond ((numberp alpha) alpha)
                    ((numberp (cdr alpha)) (cdr alpha))
                    ;; Also handle undocumented (<active> <inactive>) form.
                    ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 85) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)
;; (map! :leader
;;       (:prefix-map ("t" . "toggle")
;;        :desc "transparency" "x" 'toggle-transparency))

;;; no background in termincal emacs
(set-face-background 'default nil)
(set-face-attribute 'default nil :background nil)
#+end_src

** padding/boarder/margins
#+begin_src elisp :tangle yes
(setq-default left-margin-width 1 right-margin-width 1)
(add-hook! '+popup-buffer-mode-hook
  (set-window-margins (selected-window) 1 1))
#+end_src

** Window dividers
#+begin_src elisp :tangle yes
(window-divider-mode +1) ;; visible window divider
(setq window-divider-default-bottom-width 3 ; size in pixels
      window-divider-default-right-width 3)
;; NOTE: name in theme: 'vertical-bar'
#+end_src

** ~highligh-indent-guide~ (code fences) :package:
#+begin_src elisp :tangle yes
;; Highlight-indent-guide (package)
(setq highlight-indent-guides-method 'character
      highlight-indent-guides-responsive 'stack)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(add-hook 'org-mode-hook 'highlight-indent-guides-mode)  ; FIXME background off in code blocks
#+end_src
** diff-hl (git diff fringe) :package:UI:
#+begin_src elisp :tangle yes
;;   (global-diff-hl-mode -1) ;; FIXME
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "git diff-hl fringe" "d" #'diff-hl-mode))
#+end_src

** FIXME yascroll (scroll bar) :UI:package:
#+begin_src elisp :tangle no
(add-hook! 'prog-mode-hook #'yascroll-bar-mode)
(add-hook! 'org-mode-hook #'yascroll-bar-mode)
(setq yascroll:delay-to-hide 'nil)
;; (add-hook 'yascroll-bar-mode-hook (fringe-mode '8))

;; (custom-set-faces!
;;  `(yascroll:thumb-fringe :foreground ,(doom-color 'base7) :background ,(doom-color 'base7))
;;  `(yascroll:thumb-text-area :foreground ,(doom-color 'base7) :background ,(doom-color 'base7)))
#+end_src
#
** ~emacs-terminal-cursor-changer~ (vim state in term) :package:
#+begin_src elisp :tangle yes
(unless (display-graphic-p)
        (require 'evil-terminal-cursor-changer)
        (evil-terminal-cursor-changer-activate))
#+end_src

** Don't load background in terminal :fn:
#+begin_src elisp :tangle yes
(defun on-frame-open (&optional frame)
  "If the FRAME created in terminal don't load background color."
  (unless (display-graphic-p frame)
    (set-face-background 'default "unspecified-bg" frame)))
(add-hook 'after-make-frame-functions 'on-frame-open)
;; (defun on-frame-open (frame)
;;   (if (not (display-graphic-p frame))
;;     (set-face-background 'default "unspecified-bg" frame)))
;; (on-frame-open (selected-frame))
;; (add-hook 'after-make-frame-functions 'on-frame-open)
;; (defun on-after-init ()
;;   (unless (display-graphic-p (selected-frame))
;;     (set-face-background 'default "unspecified-bg" (selected-frame))))
;; (add-hook 'window-setup-hook 'on-after-init)
#+end_src

** no 'relative' line numbers :fn:
# FIXME: make load on startup
#+begin_src elisp :tangle yes
;; lib: lisp/lib/ui.el
(eval-after-load "ui" ;; <- TODO package name?
'(defun doom/toggle-line-numbers ()
  "Toggle line numbers.
Cycles through regular, relative and no line numbers. The order depends on what
`display-line-numbers-type' is set to. If you're using Emacs 26+, and
visual-line-mode is on, this skips relative and uses visual instead.
See `display-line-numbers' for what these values mean."
  (interactive)
  (defvar doom--line-number-style display-line-numbers-type)
  (let* ((styles `(t nil))
         (order (cons display-line-numbers-type (remq display-line-numbers-type styles)))
         (queue (memq doom--line-number-style order))
         (next (if (= (length queue) 1)
                   (car order)
                 (car (cdr queue)))))
    (setq doom--line-number-style next)
    (setq display-line-numbers next)
    (message "Switched to %s line numbers"

             (pcase next
               (`t "normal")
               (`nil "disabled")
               (_ (symbol-name next))))))
)
#+end_src

* UPDATE Completion: Company
** FIXME main
#+begin_src elisp :tangle no
;; FIXME causing crashing!
;; TODO  full completion backend in org mode src blocks?

(require 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)

(setq company-show-numbers 't           ; M-N to use
      company-minimum-prefix-length 2
      company-selection-wrap-around 't
      company-idle-delay 0.3)

;; ;; NOT WORKING
;; (add-hook 'company-mode-hook
;;   (lambda ()
;;     (add-to-list company-backends '(company-math-symbols-unicode))))

(setq company-math-allow-latex-symbols-in-faces t) ;; allow completion in org-mode text

;; FIXME only enable in certain modes...
;; ;; TabNine (AI autocomplete)
;; (require 'company-tabnine)
;; (add-to-list 'company-backends 'company-tabnine)

;; company-math (latex unicode completions)
(add-to-list 'company-backends 'company-math-symbols-unicode) ; FIXME requires hot reload! (try a hook?)
;; (add-hook 'after-init-hook 'global-company-mode)
#+end_src
** FIXME ~my/company-show-doc-buffer~ :fn:
# MAYBE: breaking org-roam capture
#+begin_src elisp :tangle yes
(defun my/company-show-doc-buffer ()
  "Temporarily show the documentation buffer for the selection."
  (interactive)
  (let* ((selected (nth company-selection company-candidates))
         (doc-buffer (or (company-call-backend 'doc-buffer selected)
                         (error "No documentation available"))))
    (with-current-buffer doc-buffer
      (goto-char (point-min)))
    (display-buffer doc-buffer t)))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-<f1>") #'my/company-show-doc-buffer))
#+end_src

* Org
** General (inc. UI)
#+begin_src elisp :tangle yes
(after! org
  (add-hook! 'org-mode-hook #'+org-pretty-mode    ; hides emphasis markers and toggles "pretty entities"
                            #'org-appear-mode))     ; expand invisible emphasis markers when insdie them etc.
                            ;; #'org-bars-mode))     ; indentation guides for org mode headings
(after! org
  (setq org-directory "~/org"               ; dir for agenda etc.
        org-startup-folded 't
        org-num-skip-unnumbered 't          ; skip `:unnumbered:` from numbering
        org-ellipsis "  "
        ;; org-ellipsis "  "
        ;; display-line-numbers-type 'nil      ; no line numbers by default in org
        ;; org-image-actual-width 450          ; set default width ; FIXME cannot override
        ;; org-startup-with-latex-preview 't   ; TODO test breaking?
        org-startup-shrink-all-tables 't
        org-startup-indented 't             ; dont indent in nested headings
        org-id-link-to-org-use-id 't
        org-appear-autolinks 't            ; auto appear links
        org-appear-autosubmarkers 't       ; auto apear subscript/superscript             ; FIXME very slow? {
        org-appear-autoentities 't         ; auto apear \alpha etc.
        org-appear-autokeywords 't         ; auto apear elements in `org-hidden-keywords' ; } END FIXME
        org-startup-with-inline-images 't
        ;; org-indent-indentation-per-level 0   ; indentation of body per heading
        ;; org-hide-leading-stars 'nil
        org-startup-folded 't))

;; FIXME Remove org-ellipsis
(defun org-no-ellipsis-in-headlines ()
  "Remove use of ellipsis in headlines. See `buffer-invisibility-spec'."
  (remove-from-invisibility-spec '(outline . t))
  (add-to-invisibility-spec 'outline))
(add-hook! 'org-mode-hook 'org-no-ellipsis-in-headlines)

#+end_src

** Todo's
#+begin_src elisp :tangle yes
(after! org
  (setq org-todo-keywords '(
    (sequence "TODO(t)" "DOING(d)" "STRT(s)" "NEXT(n)" "PROJ(p)" "WAIT(w)" "MAYBE(m)" "ERROR(e)" "FIXME(f)" "UPDATE(u)" "REVIEW(r)" "MOVE(M)" "REMOVE(R)" "(x)" "|" "DONE(D)" "CANCEL(c)" "DEPRECATED(z)")
    (sequence "[ ](T)" "[-](-)" "[?](?)" "[!](1)" "|" "[X](X)" "[.](.)")
    (sequence "EPIC(E)" "SPRINT(S)" "|")  ;; need trailing bar or last is DONE state
    (sequence "OKAY(o)" "YES(y)" "|" "NO(N)")))

  (setq org-todo-keyword-faces '(
    ("TODO" . (:foreground "DarkSeaGreen3" :weight semi-bold))
    ("DOING" . (:foreground "light goldenrod" :weight semi-bold +org-todo-active))
    ("STRT" . (:foreground "#9083e6" :weight semi-bold +org-todo-active))
    ("NEXT" . (:foreground "light salmon" :weight semi-bold))
    ("PROJ" . (:foreground "PeachPuff3" :weight semi-bold +org-todo-project))
    ("WAIT" . (:foreground "powder blue" :weight semi-bold +org-todo-onhold))
    ("MAYBE" . (:foreground "light pink" :weight semi-bold +org-todo-onhold))
    ("ERROR" . (:foreground "IndianRed" :weight semi-bold))
    ("FIXME" . (:foreground "IndianRed4" :weight semi-bold))
    ("UPDATE" . (:weight semi-bold))
    ("REVIEW" . (:foreground "DarkSeaGreen3" :weight semi-bold))
    ("REMOVE" . (:foreground "IndianRed4" :weight semi-bold))
    ("CANCEL" . (:foreground "grey11" :weight semi-bold +org-todo-cancel))
    ;;
    ("SPRINT" . (:foreground "light goldenrod" :weight semi-bold +org-todo-active))
    ("EPIC" . (:foreground "PeachPuff3" :weight semi-bold +org-todo-project))
    ;;
    ("[-]" . (+org-todo-active))
    ("[?]" . (+org-todo-onhold))
    ("[!]" . (:foreground "IndianRed4"))))
    ;; ("[.]" . (:foreground "IndianRed4"))))
    ;; ("YES" . (:foreground "DarkSeaGreen3"))
    ;; ("NO" . (+org-todo-cancel))))

  (setq org-modern-todo-faces '(
    ("TODO" :background "DarkSeaGreen3" :foreground "black")
    ("DOING" :background "light goldenrod" :foreground "black")
    ("STRT" :background "#9083e6" :foreground "black")
    ("NEXT" :background "light salmon" :foreground "black")
    ("PROJ" :background "PeachPuff3" :foreground "black")
    ("WAIT" :background "powder blue" :foreground "black")
    ("MAYBE" :background "light pink" :foreground "black")
    ("ERROR" :background "IndianRed" :foreground "black")
    ("FIXME" :background "IndianRed4" :foreground "black")
    ("UPDATE" :background "sea green" :foreground "black")
    ("REVIEW" :background "DarkSeaGreen3" :foreground "black")
    ("REMOVE" :background "IndianRed4" :foreground "black")
    ("CANCEL" :background "grey11" :foreground "black")
    ;;
    ("SPRINT" :background "light goldenrod" :foreground "black")
    ("EPIC" :background "PeachPuff3" :foreground "black")
    ;; FIXME casuing message errors
    ("[ ]" :background nil :foreground "DarkSeaGreen")
    ("[X]" :background nil :foreground "grey11")
    ("[-]" :background nil :foreground "RoyalBlue") ; update (RoyalBlue broken)
    ("[?]" :background nil :foreground "light goldenrod")
    ("[!]" :background nil :foreground "IndianRed"))))
    ;; ("YES" :foreground "DarkSeaGreen3"))
    ;; ("NO" (+org-todo-cancel))
#+end_src

** Tags
#+begin_src elisp
(setq org-tag-persistent-alist
      '((:startgroup . nil)
        ("uni" . ?u)
        ("computing" . ?c)
        ("math" . ?*)
        ("philosophy" . ?p)
        ("psychology" . ?q)
        ("research" . ?r)
        ("my" . ?m)
        ("private" . ?M)
        ("xini" . ?X)
        ("money" . ?£)
        (:endgroup . nil)
        ("noexport" . ?x)))
#+end_src

** Tables
#+begin_src elisp :tangle no
;; Horizontal scrolling for tables
(require 'phscroll)
(after! org
  (setq org-startup-truncated nil)
  (load "org-phscroll.el"))

;; (add-hook 'org-mode-hook #'valign-mode)
;; (setq valign-fancy-bar 'non-nil)
#+end_src
#

** Babel (src blocks)
*** Default header args
#+begin_src elisp :tangle yes
(setq org-babel-default-header-args
  '((:session  . "none")
    (:results  . "replace")
    (:exports  . "both")
    (:cache    . "no")
    (:noweb    . "no")
    (:hlines   . "no")
    (:tangle   . "no")
    (:eval     . "never-export")
    (:comments . "link")))
#+end_src

*** Languages
#+begin_src elisp :tangle yes
;;; Setup
(setq ob-mermaid-cli-path "~/node_modules/.bin/mmdc") ; set up mermaid

;;; Main
(org-babel-do-load-languages
  'org-babel-load-languages
    '((C. t)
      (dot . t)
      (haskell . t)
      (js . t)
      (json . t)
      (julia . t)
      (mermaid . t)
      (nix .t)
      (python . t)
      (rust . t)
      ;; (sh . t)
      (typescript . t)
      (jupyter . t)))  ; NOTE: jupyter must be last

;;; Typescript
(defun org-babel-execute:typescript (body params)
  (let ((org-babel-js-cmd "npx ts-node < "))
    (org-babel-execute:js body params)))

;; (defalias 'org-babel-execute:ts 'org-babel-execute:typescript) ; FIXME
#+end_src

*** fix Emacs-jupyter output results ansi formatting
#+begin_src elisp :tangle yes
(defun display-ansi-colors ()
(ansi-color-apply-on-region (point-min) (point-max)))
(add-hook 'org-babel-after-execute-hook #'display-ansi-colors)
#+end_src

*** Make org-edit-special (src block) popup in current buffer
#+begin_src elisp :tangle yes
(after! org
  (setq org-src-window-setup 'current-window)
  (set-popup-rule! "^\\*Org Src" :ignore t))
#+end_src

** Export
*** General
#+begin_src elisp :tangle no
(setq org-export-headline-levels 6) ; I like nesting

(setq org-list-allow-alphabetical t) ; allow alphabetic counters

;; show git version on creator string
(setq org-export-creator-string
      (format "Emacs %s (Org mode %s %s)" emacs-version (org-release) (org-git-version)))
#+end_src
#
*** HTML Export
#+begin_src elisp :tangle no
;; TODO move template to .doom.d folder!

(setq org-html-html5-fancy t
      org-html-table-caption-above nil
      org-html-htmlize-output-type 'inline-css)
      ;; org-html-htmlize-output-type 'css)

;; (setq org-confirm-babel-evaluate nil)

;; FIXME: prevent oversize svg img widths on org html export
;; (with-eval-after-load 'ox-html
;;   (setq org-html-head
;;         (replace-regexp-in-string
;;          ".org-svg { width: 90%; }"
;;          ".org-svg { width: auto; }"
;;          org-html-style-default)))
#+end_src
#
*** Latex Export
#+begin_src elisp :tangle yes
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))

(after! ox-latex
  (setq org-latex-prefer-user-labels t)
  (setq org-latex-compiler "xelatex")
  (setq org-latex-pdf-process '("latexmk -xelatex -f -pdf %f -output-directory=%o -shell-escape")))
  ;; (setq org-latex-pdf-process
  ;;   '("xelatex -interaction nonstopmode -output-directory %o %f -shell-escape"
  ;;     "xelatex -interaction nonstopmode -output-directory %o %f -shell-escape"
  ;;     "xelatex -interaction nonstopmode -output-directory %o %f -shell-escape")))
  ;; ;; ^ for multiple passes

  ;; Need from latex minted package
(setq org-latex-listings 'minted
      org-latex-minted-options '(("breaklines" "true")
                                 ;; ("" "")
                                 ("breakanywhere" "true")
                                ;; ("framesep" "2mm")
                                 ("baselinestretch" "1.1")    ;; line spacing
                                 ;; ("fontsize" "\footnotesize")  ;;
                                 ;; ("fontsize" "16")  ;;
                                 ("linenos" "true")
                                 ("numbersep" "4pt")
                                 ("mathescape" "true")        ;; allows $$ latex in comments
                                 ;; ("bgcolor=grey!10!white")       ;; FIXME broken
                                 ;; ("frame" "single")))         ;; frame line
))

;; (setq org-latex-packages-alist '(("" "minted")("" "fontspec")))

(setq org-latex-caption-above nil)

;; svg rendering (to PDF via Inkscape)
;; NOTE must have inkscape installed and svg be in same folder
;; (setq org-latex-pdf-process
;;       (let
;;           ((cmd (concat "pdflatex -shell-escape -interaction nonstopmode"
;;                 " --synctex=1"
;;                 " -output-directory %o %f")))
;;         (list cmd
;;           "cd %o; if test -r %b.idx; then makeindex %b.idx; fi"
;;           "cd %o; bibtex %b"
;;           cmd
;;           cmd)))

(with-eval-after-load 'ox-latex
  (setq org-latex-classes
    '(("infthesis"
      "\\documentclass[logo,bsc,singlespacing,parskip]{infthesis} [NO-PACKAGES]"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

    ("article" "\\documentclass[11pt]{article}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

    ("report" "\\documentclass[11pt]{report}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

    ("book" "\\documentclass[11pt]{book}"
      ("\\part{%s}" . "\\part*{%s}")
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+end_src
#

** Latex fragments :UI:
:PROPERTIES:
:ID:       4272fde4-d8c9-4932-af2c-01d2522f7baa
:END:
#+begin_src elisp
(setq org-format-latex-options
  (list
        :foreground 'default  ;; or `auto'
        ;; :background 'auto
        :scale 1.1  ;; bigger latex fragment
        ;; :html-foreground "Black"
        ;; :html-background "Transparent"
        ;; :html-scale 1.0
        :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))

;; syntax hilighting for latex fragments
(setq org-highlight-latex-and-related '(native script entities))

;; (setq org-latex-create-formula-image-program 'imagemagick) ; Recommended

;; prevent background redering uglyness
;; OLD: https://stackoverflow.com/questions/69474043/emacs-org-mode-background-color-of-latex-fragments-with-org-highlight-latex-a
(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))

;; Automatically load inline previews with org-fragtog
;; (add-hook 'org-mode-hook 'org-fragtog-mode) ; TODO see if breaking

;; Color transparent rather than match default face
(setq org-format-latex-options
  (plist-put org-format-latex-options :background "Transparent"))

;; specify the justification you want
(plist-put org-format-latex-options :justify 'center)
#+end_src

** Org Bars (outline vertical guides) :package:UI:
#+begin_src elisp :tangle yes
(require 'org-bars)
(after! org (add-hook 'org-mode-hook #'org-bars-mode))
(setq org-bars-stars '(:empty "*" :invisible "*" :visible "*"))
;; (setq org-bars-extra-pixels-height 6) ;; fix gaps in org-bars
#+end_src

** Org Modern :package:UI:
#+begin_src elisp :tangle yes
(global-org-modern-mode)
(set-face-attribute 'org-modern-symbol nil :family "DM Mono")
(setq org-modern-star nil)
(setq org-modern-hide-stars nil)
#+end_src

** Org Cite :package:
#+begin_src elisp :tangle no
;; (setq org-cite-global-bibliography "~/org/roam/Zotero/bibliography.bib")
(setq org-cite-csl-styles-dir "~/org/roam/Zotero/styles")
#+end_src
#
** emacs-jupyter :package:
#+begin_src elisp :tangle yes
;; TypeScript
(setq org-babel-default-header-args:jupyter-typescript '(
  (:session . "ts")
  (:kernel . "tslab")))
;; Python
(setq org-babel-default-header-args:jupyter-python '(
   (:session . "py")
   ;; (:pandoc . "t")
   (:kernel . "python")))
;; Haskell
(setq org-babel-default-header-args:jupyter-haskell '(
   (:session . "hs")
   (:kernel . "haskell")))
;; Julia
(setq org-babel-default-header-args:jupyter-julia '(
  (:session . "jl")
  (:kernel . "julia-1.7")))

; this seems to add syntax-highlighting to jupyter-python and jupyter-typescript blocks
(after! org-src
  (dolist (lang '(python typescript jupyter))
  (cl-pushnew (cons (format "jupyter-%s" lang) lang)
                org-src-lang-modes :key #'car))
  ;;(org-babel-jupyter-override-src-block "python") ;; alias all python to jupyter-python
  ;;(org-babel-jupyter-override-src-block "typescript") ;; alias all python to jupyter-python
)
#+end_src
#
** Org-noter :package:
#+begin_src elisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq org-noter-always-create-frame nil))  ; stop opening frames
#+end_src
#
** Hypothesis :package:
Hypothesis is a great web extension for highlighting and taking notes on web pages. The emacs extension allows these to be imported into org mode.
#+begin_src elisp
(setq hypothesis-username "nazzacode"
      hypothesis-token "6879-DJYjeV3gat2emzWKlSGkQu20tQTvQK3s7xVSepSdjfA")
#+end_src
#
** FIXME org-download :package:
Screenshot capture direct to orgmode.
#+begin_src elisp :tangle no

(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)  ; allow in dired
;; (setq org-download-screenshot-method "xclip")
(setq org-download-screenshot-method "spectacle")
(setq-default org-download-image-dir "~/org/roam/Images")
;; NOTE: Set for individual files with:
;; -*- mode: Org; org-download-image-dir: "~/org/roam/Images"; -*-

  ;; (use-package org-download
  ;; :after org
  ;; :bind
  ;; (:map org-mode-map
  ;;       (("a-Y" . org-download-screenshot)
  ;;        ("a-y" . org-download-yank)))
#+end_src
#
** DEPRECATED org-special-blocks-extra :package:
#+begin_src elisp :tangle no
(add-hook #'org-mode-hook #'org-special-block-extras-mode)
#+end_src
#
** DEPRECATED Hide radio links :UI:fn:
Hides expanded view of radio tags like links. Works, but a bit forgotten how to toggle (org hidden links?)
#+begin_src elisp
(defcustom org-hidden-links-additional-re "\\(<<<\\)[[:print:]]+?\\(>>>\\)"
  "Regular expression that matches strings where the invisible-property of the sub-matches 1 and 2 is set to org-link."
  :type '(choice (const :tag "Off" nil) regexp)
  :group 'org-link)
(make-variable-buffer-local 'org-hidden-links-additional-re)

(defun org-activate-hidden-links-additional (limit)
  "Put invisible-property org-link on strings matching `org-hide-links-additional-re'."
  (if org-hidden-links-additional-re
      (re-search-forward org-hidden-links-additional-re limit t)
    (goto-char limit)
    nil))

(defun org-hidden-links-hook-function ()
  "Add rule for `org-activate-hidden-links-additional' to `org-font-lock-extra-keywords'.
You can include this function in `org-font-lock-set-keywords-hook'."
  (add-to-list 'org-font-lock-extra-keywords
                              '(org-activate-hidden-links-additional
                                (1 '(face org-target invisible org-link))
                (2 '(face org-target invisible org-link)))))

(add-hook 'org-font-lock-set-keywords-hook #'org-hidden-links-hook-function)

#+end_src
#
** Hide/show properties drawer :fn:
:PROPERTIES:
:ID:       8efa6cae-1ae0-470a-a4fb-999fe506a2a5
:END:
#+begin_src elisp
;; Funtion to hide/unhide the properties drawer
(defun my/org-toggle-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))

(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))
#+end_src
#

* Org-roam
** General
See: [[https://www.orgroam.com/manual.html][org-roam manu  al]]
#+begin_src elisp :tangle yes
(setq org-roam-directory "~/org/roam")

      ;; +org-roam-open-buffer-on-find-file nil)

; FIXME: way to exclude nodes in roam-dir from search graph
;; (setq org-roam-db-node-include-function (lambda ()
;;   (not (member "ROAM_EXCLUDE" (org-get-tags)))))
#+end_src
#
** Org Roam Capture Templates
:PROPERTIES:
:ID:       f1adfb35-ad24-4956-9d91-22461b485a94
:END:
#+begin_src elisp :tangle yes
(setq org-roam-capture-templates
;; Default
  `(("d" "default" plain "%?"
    :if-new (file+head "${slug}.org"
"
,#+title: ${title}
,#+filetags:\n")
    :unnarrowed t)

;; ;; ;; TEST: properties drawer FIXME
;;     ("t" "test" plain "%?"
;;            :if-new (file+head "${slug}.org"
;;                               ":PROPERTIES:
;; :ROAM_ALIASES: %^{aliases}
;; :END:
;; ,#+title: ${title}\n")
;;            :immediate-finish t
;;            :unnarrowed t)))

;; Code Challange
  ("c" "Code Challenge" plain "%?"
    :unnarrowed t
    :immediate-finish t
    :if-new (file+head "CodeChallenges/${slug}.org"
":PROPERTIES:
:Source: %^{source}
:Difficulty:
:Rating:
:END:
,#+title: ${title}
,#+filetags: code-challange rust
,#+property: header-args :tangle src/bin/${slug}.rs :comments link

\n* Question

,*Example 1*
: Input:
: Output:

,* Solution
,#+begin_src rustic
struct Solution {}
impl Solution {
    pub fn foo() {
    }
}
,#+end_src

\n* Testing
,#+begin_src rustic
#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test1() { assert_eq!(Solution::foo(), 1) }
}
,#+end_src

,* Runtime Analysis"))

;; Debug/Troubleshooting
  ("D" "Debug/Error/Fix-me" plain "%?"
    :if-new (file+head "${slug}.org"

"#+title: ${title}
,#+filetags: :debug:

\n* Problem
\n* TODO Solution")

    :unnarrowed t)

;; Cheatsheet
  ("C" "cheatsheet" plain "%?"
    :if-new (file+head "cheatsheets/${slug}.org"

"#+title: ${title}
,#+filetags: :cheatsheat:\n

| Command | Description |
|---------+-------------|
|         |             |")

    :unnarrowed t)

;; Todo (Kanban)
  ("t" "Todo" plain "%?"
    :if-new (file+head "Todo/${slug}.org"


"#+title: ${title}
,#+filetags:
,#+startup: show2levels
,#+CATEGORY:

\n* DOING
\n* NEXT
\n* TODO
\n* DONE")
    :unnarrowed t)))
#+end_src

** Hide radio-target syntax in node name
NOt needed anymore?
#+begin_src elisp :tangle yes
(defun org-link-display-format-h (s)
  "Replace radio links in string S with their description.
If there is no description, use the link target."
  (save-match-data
    (replace-regexp-in-string
     org-radio-target-regexp
     (lambda (m) (or (match-string 2 m) (match-string 1 m)))
     s nil t)))

(advice-add  'org-link-display-format :filter-return 'org-link-display-format-h)
#+end_src
#
** DEPRECATED Org-roam-bibtex (ORB)
#+begin_src elisp :tangle no
(use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here

;;   (setq orb-preformat-keywords
;;       '("citekey" "title" "url" "author-or-editor" "keywords" "file")
;;       orb-process-file-keyword t
;;       orb-file-field-extensions '("pdf"))
;;   ;; (setq orb-preformat-keywords
;;   ;; '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
;;   (setq orb-templates
;;     '(("r" "ref" plain (function org-roam-fapture--get-point)
;;      ""
;;      :file-name "${slug}"
;;      :head "#+TITLE: ${citekey}: ${title}\n#+roam_key: ${ref}\n#+roam_tags:

;; - keywords :: ${keywords}

;; \n* ${title}
;; :PROPERTIES:
;; :Custom_ID: ${citekey}
;; :URL: ${url}
;; :AUTHOR: ${author-or-editor}
;; :NOTER_DOCUMENT: ${file}
;; :NOTER_PAGE:
;; :END:"
;;      :unnarrowed t))))
#+end_src
#
** org-roam-ui
#+begin_src elisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
    ;; :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
#
* Modeline
** main
#+begin_src elisp :tangle yes
(setq doom-modeline-height 25
      ;; doom-modeline-indent-info t
      doom-modeline-vcs-max-length 12
      doom-modeline-buffer-file-name-style 'truncate-upto-root
      doom-modeline-icon nil
      doom-modeline-major-mode-icon t
      doom-modeline-enable-word-count t
      ;; doom-modeline-hud t ;; ?
      ;; doom-modeline-major-mode-color-icon nil)
      )

;; main modline
;; (after! doom-modeline
;;   (doom-modeline-def-modeline 'main
;;     '(bar matches buffer-info remote-host buffer-position parrot selection-info)
;;     '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs " "))) ; <-- added padding here

(setq all-the-icons-scale-factor 0.9)  ;; 1.1.
#+end_src

** mini-modeline
#+begin_src elisp :tangle yes
;;; mini-modeline
(use-package mini-modeline
  :after doom-modeline
  :hook ((after-init . mini-modeline-mode))
  (aorst--theme-change . aorst/mini-modeline-setup-faces)
  (isearch-mode . aorst/mini-modeline-isearch)
  (isearch-mode-end . aorst/mini-modeline-isearch-end)
  :custom
  (mini-modeline-display-gui-line nil)
  ;; (mini-modeline-l-format '(:eval (string-trim-left (eval mode-line-l-format)))) ; FIXME
  ;; (mini-modeline-r-format '(:eval (eval mode-line-r-format)))
  (mini-modeline-r-format '(:eval (doom-modeline-format--minibuffer-line)))
  :config
  (doom-modeline-def-modeline 'minibuffer-line
    '(modals buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs " "))
  ;; NOTE remove `buffer-info` once tabs setup!
  :hook (after-init . mini-modeline-mode))

(global-hide-mode-line-mode 1)

;; FIXME breaking org roam insert (double #+title)
;; (after! doom-modeline
;;   (add-hook 'text-mode-hook #'mini-modeline-mode))
#+end_src

;; TODO UPDATE: based on  https://github.com/seagle0128/doom-modeline/issues/315
#+begin_src elisp :tangle no
;; (use-package! doom-modeline
;;   :custom
;;   (doom-modeline-buffer-file-name-style 'truncate-except-project)
;;   (doom-modeline-icon nil))

(use-package! mini-modeline
  :after doom-modeline
  :config
  (doom-modeline-def-modeline 'minibuffer-line
    '(modals workspace-name window-number matches buffer-info remote-host buffer-position word-count selection-info misc-info major-mode process vcs lsp checker))

  (setq mini-modeline-r-format '(:eval (doom-modeline-format--minibuffer-line)))

  (setq mini-modeline-right-padding 1
        mini-modeline-enhance-visual t)

  (set-face-attribute 'mode-line nil :box nil)
  (set-face-attribute 'mini-modeline-mode-line nil :background (face-background 'fringe) :height 0.2)
  (set-face-attribute 'mini-modeline-mode-line-inactive nil :background (face-background 'fringe) :height 0.2)

  (mini-modeline-mode 1))
#+end_src

* Dired
#+begin_src elisp :tangle yes
;; only open one dired buffer at a time

(setf dired-kill-when-opening-new-dired-buffer t)

(add-hook 'dired-mode-hook 'dired-hide-details-mode)

(setq dired-listing-switches "-lAX --group-directories-first")
#+end_src
#
* Agenda
:PROPERTIES:
:ID:       944f3c98-54c4-4a7c-a6ed-7c609fc340ce
:END:
** General
#+begin_src elisp :tangle no
;; (custom-set-variables '(org-agenda-files (list "~/org/roam/gcal.org")))
 (setq org-agenda-files '("~/org/roam/gcal.org"))
#+end_src
#
** Clean category column garbage
#+begin_src elisp :tangle no
(setq org-agenda-prefix-format
      '((agenda . " %i %-12(vulpea-agenda-category)%?-12t% s")
        (todo . " %i %-12(vulpea-agenda-category) ")
        (tags . " %i %-12(vulpea-agenda-category) ")
        (search . " %i %-12(vaulpea-agenda-category) ")))

(defun vulpea-agenda-category ()
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category)))
    (or (if (and
             title
             (string-equal category file-name))
            title
          category)
        "")))

(defun vulpea-buffer-prop-get (name)
  "Get a buffer property called NAME as a string."
  (org-with-point-at 1
    (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                             (point-max) t)
      (buffer-substring-no-properties
       (match-beginning 1)
       (match-end 1)))))
#+end_src

* Calendar
#+begin_src elisp :tangle no
;; gcal integration
(require 'calfw)
(require 'org-gcal)

(setq org-gcal-client-id "189857002612-bei34shug7gu4ft5ssi5mfedl1kb50u2.apps.googleusercontent.com"
      org-gcal-client-secret "jMCbPjcHaUWrGu02yUVwIi1m"
      org-gcal-fetch-file-alist '(("nathansharp03@gmail.com" .  "~/org/roam/gcal.org")))

                                  ;; ("another-mail@gmail.com" .  "~/task.org")))
;; NOTE: requires gpg (gnupg)

;; Pull into single calender
;; (require 'calfw-cal)
(require 'calfw-ical)
;;(require 'calfw-howm)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source  )  ; orgmode source
    ;; (cfw:cal-create-source "Orange") ; diary source
    ;; (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
    ;; ↓ google calendar ICS
    ;; (cfw:ical-create-source "gcal"
      ;; "https://calendar.google.com/calendar/ical/nathansharp03%40gmail.com/private-5984779a038e5ab68ee283c744922c8a/basic.ics"
      ;; "#339CDB")
)))

(setq package-check-signature nil)

;; duplication of defualt behavior
;; TODO on startup?
;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

#+end_src
#
* Dashboard
#+begin_src elisp :tangle no
;; (setq doom-dashboard-widget-banner "~/.doom.d/doom_splash.txt")
(require 'dashboard)
(dashboard-setup-startup-hook)
                                        ; Set the title
(setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
;; Set the banner
(setq dashboard-startup-banner "~/.doom.d/doom_splash.txt")
;; Value can be
;; 'official which displays the official emacs logo
;; 'logo which displays an alternative emacs logo
;; 1, 2 or 3 which displays one of the text banners
;; "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
;; Content is not centered by default. To center, set
(setq dashboard-center-content t)

;; To disable shortcut "jump" indicators for each section, set
;; (setq dashboard-show-shortcuts nil)

(setq dashboard-items '((recents  . 5)
                        ;; (bookmarks . 5)
                        ;; (projects . 5)
                        (agenda . 5)))
;; (registers . 5)


(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)
;; (setq dashboard-set-navigator t) ??
(setq dashboard-set-init-info t)
;; (setq dashboard-week-agenda t)
(setq dashboard-item-names '(("Recent Files:" . "Recent:")
                             ("Agenda for today:" . "Today's agenda:")
                             ("Agenda for the coming week:" . "Agenda:")))
#+end_src

* Treemacs (file/project explorer)
#+begin_src elisp :tangle yes
(setq doom-themes-treemacs-enable-variable-pitch nil
     treemacs-width-is-initially-locked 'nil)
#+end_src

* Packages
** Pdf (tools)
#+begin_src elisp
;; more fine-grained zooming
(setq pdf-view-resize-factor 1.05)

;; pdf-annot-list-format
(setq pdf-annot-list-format '((page . 3) (type . 6) (contents . 24) (date . 20))
      pdf-annot-list-highlight-type 't)

;; restore pdf to previous reading position
(add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
#+end_src

** Nov.el
#+begin_src elisp :tangle no
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
;; Font
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
(setq nov-text-width t)
(setq visual-fill-column-center-text t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
#+end_src
#
** Graphviz (dot)
#+begin_src elisp :tangle no
(use-package! graphviz-dot-mode
  :commands graphviz-dot-mode
  :mode ("\\.dot\\'" "\\.gz\\'")
  ;; correct higlighting in org mode
  :init
  (after! org
    (setcdr (assoc "dot" org-src-lang-modes)
            'graphviz-dot)))
;; ;; TODO Completions
;; (use-package! company-graphviz-dot
;;   :after graphviz-dot-mode)
#+end_src
#
** Writeroom mode
#+begin_src elisp :tangle yes
(with-eval-after-load 'writeroom-mode
  (define-key writeroom-mode-map (kbd "C-M-<") #'writeroom-decrease-width)
  (define-key writeroom-mode-map (kbd "C-M->") #'writeroom-increase-width)
  (define-key writeroom-mode-map (kbd "C-M-=") #'writeroom-adjust-width))

(add-hook 'writeroom-mode-hook #'(lambda () (text-scale-increase 1)))
(add-hook 'writeroom-mode-hook #'(lambda () (mixed-pitch-mode -1)))
#+end_src

** LSP
#+begin_src elisp :tangle yes
(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-cursor t
      lsp-lens-enable t
      lsp-headerline-breadcrumb-enable t
      lsp-ui-sideline-enable t
      lsp-ui-sideline-show-code-actions t
      lsp-ui-sideline-enable t
      lsp-ui-sideline-show-hover t
      lsp-modeline-code-actions-enable t
      lsp-signature-render-documentation t
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-headerline-breadcrumb-enable-diagnostics nil)
#+end_src

** Tree sittier
#+begin_src elisp :tangle yes
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

** [[id:36686cfd-9aaa-4886-bbfd-c5e64f9e1f67][Org mode packages]]
** [[id:0a2cd5a0-816a-462f-9e9e-c0b6e92d086d][Org-roam packages]]
* Languages
** Typescript
#+begin_src elisp :tangle no
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

(setq tide-completion-detailed t)
#+end_src
#
** Solidity
#+begin_src elisp :tangle no
;; (require 'flycheck)
;; (require 'solidity-flycheck)

;; ;; Linter Paths
;; (setq solidity-solc-path "/usr/bin/solc                   js")
;; (setq solidity-solium-path "/usr/bin/solium")

;; (require 'solidity-mode)


;; (setq solidity-flycheck-solc-checker-active t)
;; (setq solidity-flycheck-solium-checker-active t)

(setq solidity-comment-style 'slash)

(add-hook 'after-init-hook #'global-flycheck-mode)

;; (setq solidity-solc-path "/usr/bin/solc                   js")

(setq solidity-solium-path "/usr/bin/solium")
;; (setq flycheck-solidity-solium-soliumrcfile "~/.soliumrc. json")

(setq solidity-flycheck-solium-checker-active t)

(require 'solidity-flycheck)

;; (add-hook 'solidity-mode-hook
;;   (lambda ()
;;   (set (make-local-variable 'company-backends)
;;     (append '((company-solidity company-capf company-dabbrev-code))
;;       company-backends))))
#+end_src
#
** TODO                                                      Julia
* My Functions :my:
#+begin_src elisp :tangle no
(defun my-split-pararagraph-into-lines ()
  "Split current paragraph into lines with one sentence each."
  (interactive)
  (save-excursion
    (let ((fill-column (point-max)))
      (fill-paragraph))
    (let ((auto-fill-p auto-fill-function)
          (end (progn (end-of-line) (backward-sentence) (point))))
      (back-to-indentation)
      (unless (= (point) end)
        (auto-fill-mode -1)
        (while (< (point) end)
          (forward-sentence)
          (delete-horizontal-space)
          (newline-and-indent))
        (deactivate-mark)
        (when auto-fill-p
          (auto-fill-mode t))
        (when (looking-at "^$")
          (backward-delete-char 1))))))
#+end_src

* My Keybindings :my:
:PROPERTIES:
:ID:       f92454e0-c4da-451a-9da9-ae118c1d8947
:END:
** main
Important note from the [[https://discourse.doomemacs.org/t/how-to-re-bind-keys/56][doom documentation on keybindings]]:
#+begin_quote
Emacs reads keymaps to determine what to do when you type in a key sequence. A keymap is a mapping of key sequences to commands (and each key=>command mapping is a keybind). At any time Emacs has a hierarchy of active keymaps, all vying for precedence.

*Keymaps with higher precedence will override keymaps with lower precedence.* i.e. If you press a key, Emacs will travel down the list of active keymaps from highest to lowest precedence until it finds a matching keybind.
#+end_quote

#+begin_src elisp :tangle yes
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "mixed pitch mode" "p" #'mixed-pitch-mode))
#+end_src

** VS code emulation
    #+begin_src elisp  :tangle yes
;; comment lines
;; ! not working
;; (map! :map global-map "<C-/>" #'evilnc-comment-or-uncomment-lines)
;; :) working
(define-key global-map (kbd "C-/") #'evilnc-comment-or-uncomment-lines)

;; TODO: move lines up/down
    #+end_src
