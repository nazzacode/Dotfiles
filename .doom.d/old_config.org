#+PROPERTY: header-args :results none :comments link
#+startup: num
#+options: toc:2
#+title: Doom Emacs Config
#+author: Nathan Sharp (@nazzacode)
#+description: Nathan's (@nazzacode's) Personal Doom Emacs config.
#+filetags: :emacs:config:dotfiles:

* Table of Contents :toc:
:PROPERTIES:
:UNNUMBERED: t
:END:
- [[#global-configuration][Global Configuration]]
  - [[#better-defaults][Better Defaults]]
  - [[#user-info][User Info]]
- [[#ui][UI]]
  - [[#general][General]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#window-divider][Window Divider]]
  - [[#modeline][Modeline]]
  - [[#update-scroll-bar-yascroll][UPDATE scroll bar (yascroll)]]
  - [[#which-key][Which key]]
- [[#completion][Completion]]
- [[#org-roam][Org-roam]]
  - [[#general-1][General]]
  - [[#org-roam-capture-templates][Org Roam Capture Templates]]
  - [[#hide-radio-target-syntax-in-node-name][Hide radio-target syntax in node name]]
  - [[#packages][Packages]]
- [[#dired][Dired]]
  - [[#peep-dired][peep-dired]]
- [[#agenda][Agenda]]
  - [[#clean-category-column-garbage][Clean category column garbage]]
  - [[#writeroom-mode][Writeroom Mode]]
- [[#calendar][Calendar]]
- [[#latex][Latex]]
  - [[#latex-fragments][Latex Fragments]]
- [[#exporting][Exporting]]
- [[#typescript][Typescript]]
  - [[#--move-to-langauges][[ ] Move to "langauges"?]]
- [[#packages-1][Packages]]
  - [[#treemacs][Treemacs]]
  - [[#pdf-tools][Pdf (tools)]]
  - [[#novel][Nov.el]]
  - [[#writeroom-mode-1][Writeroom Mode]]
  - [[#maybe-direnv-nix][MAYBE Direnv (Nix)]]
  - [[#maybe-deft][MAYBE Deft]]
  - [[#org-mode-packages][Org mode packages]]
  - [[#org-roam-packages][Org-roam packages]]
  - [[#graphviz-dot][Graphviz (dot)]]

* Global Configuration
** Better Defaults
Harness the performance advantages of lexical-binding (I think?). See:
  1. [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][GNU: Lexical Binding]]
  2. [[https://nullprogram.com/blog/2017/01/30/][How to Write Fast(er) Emacs Lisp]]
  3. [[https://nullprogram.com/blog/2016/12/22/][Some Performace Advantages of Lexical Scope]]
#+BEGIN_SRC elisp
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

#+begin_src elisp
(setq auto-save-default t
      initial-major-mode 'org-mode
      make-backup-files t)

;; (menu-bar-mode 1)  ;; good for learning

(setq-default tab-width 2)
(setq straight-allow-recipe-inheritance nil)

;; (pixel-scroll-mode 1) ; smooth scrolling ; ERROR causes severe lag

(setq lisp-indent-offset 2)
#+end_src
#
** User Info
"For GOG configuration, email clients, file templates and snippets." - Doom Emacs
#+BEGIN_SRC elisp
(setq user-full-name "Nathan Sharp"
      my-name "nazzacode"
      user-mail-address "nasharp@outlook.com")
#+END_SRC
#
* UI
# TODO   get unicode emojis as default
** General
#+begin_src elisp
(setq-default line-spacing 0.1)

(setq display-line-numbers-type 'relative  ; or `nil'
      +ivy-buffer-preview t                ; preview buffer on switch
      emojify-emoji-set "emojione-v2.2.6"  ; increase resolution from default "emojione-v2.2.6-22"
      fringe-mode 'default)  ; FIXME

(after! emacs-startup-hook
  fringe-mode 'default
  (global-hl-line-mode -1))  ; dont highlight the line

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode) ; icons in dired

;; Highlight-indent-guide
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character
      highlight-indent-guides-responsive 'stack)

;; Rainbow mode: colorise strings that represent colors
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda () (rainbow-mode 1)))
(global-rainbow-mode 1)

#+end_src
#
** Theme
#+BEGIN_SRC elisp
(setq doom-theme 'my-doom-dark+)
;; TODO highlight src block heads and footers a different color? (without bleed? (end foot early)
;; (setq doom-theme 'my-doom-gruvbox)
;; (setq doom-theme 'doom-acario-light)
;; (setq doom-theme 'doom-zenburn)

(setq doom-themes-enable-bold t
      doom-themes-padded-modeline nil)


#+END_SRC
#
** Fonts
#+BEGIN_SRC elisp
;; (use-package! mixed-pitch
;;   :hook (org-mode . mixed-pitch-mode)
;;   :config
;;   (setq variable-pitch-set-heigth 't)
;   (set-face-attribute 'variable-pitch nil :height 1.5))

(setq doom-font (font-spec :family "Hasklug Nerd Font Mono" :size 26 :height 1.0)
;; (setq  doom-font (font-spec :family "Agave Nerd Font Mono")
;; (setq  doom-font (font-spec :family "Cousine Nerd Font Mono" ) ;; TODO size
       doom-variable-pitch-font (font-spec :family "DM Mono")
;;       doom-variable-pitch-font (font-spec :family "Iosevka Aile") ; :size 32 :height 1.5)
;;       doom-variable-pitch-font (font-spec :family "ETBookOT")
;;       doom-variable-pitch-font (font-spec :family "TSCu_Comic")
;;       doom-unicode-font (font-spec :family "Symbola")          ; good unicode support
;;       doom-big-font (font-spec :family "Fira Mono" :size 19))
)
#+END_SRC
#
** TODO Window Divider
#+begin_src elisp
;; TODO better window divider for emacs in terminal
;; (defun my-change-window-divider ()
;;   (let ((display-table (or buffer-display-table standard-display-table)))
;;     (set-display-table-slot display-table 5 ?│)
;;     (set-window-display-table (selected-window) display-table)))

;; (add-hook 'window-configuration-change-hook 'my-change-window-divider)
#+end_src
#

** TODO Modeline
#+begin_src elisp
;; TODO minibuffer modeline + centaur (vscode-esque)

;; (custom-set-faces!
;;     '(mode-line :family "Iosevka Aile")  ; :height 0.85)
;;     '(mode-line-inactive :family "Iosevka Aile"))  ; :height 0.85))

(setq doom-modeline-height 10
      doom-modeline-indent-info t
      doom-modeline-vcs-max-length 12
      doom-modeline-buffer-file-name-style 'truncate-all
      doom-modeline-icon t
      doom-modeline-major-mode-icon t)

;; (defcustom doom-modeline-hud nil)

;; (setq mini-modeline-mode t)
;; (use-package mini-modeline
;;   :after doom-modeline
;;   :config
;;   (mini-modeline-mode t))

;; 2nd shot ...
;; (use-package eldoc-eval)
;; (use-package doom-modeline
;;   ;; :demand t
;;   ;; :custom
;;   ;; (doom-modeline-buffer-file-name-style 'truncate-all)
;;   ;; (doom-modeline-bar-width (frame-parameter nil 'left-fringe))
;;   ;; (doom-modeline-height 10)
;;   ;; (doom-modeline-icon t)
;;   ;; (doom-modeline-icons-scale-factor 0.8)
;;   ;; :config
;;   ;; (set-face-attribute 'doom-modeline nil :inherit 'default)
;;   ;; (set-face-attribute 'doom-modeline-inactive nil :inherit 'default)
;;   )

;; (setq doom-modeline-height 10
;;    doom-modeline-buffer-file-name-style 'truncate-all
;;    doom-modeline-bar-width (frame-parameter nil 'left-fringe)
;;    doom-modeline-height 10
;;    doom-modeline-icon nil
;;    ;; doom-modeline-icons-scale-factor 0.8
;; )

;; (use-package mini-modeline
;;   :after doom-modeline
;;   :config
;;   (doom-modeline-def-modeline 'minibuffer-line
;;     '(modals workspace-name window-number matches buffer-info remote-host buffer-position word-count selection-info misc-info major-mode process vcs lsp checker))

;;   ;; (setq mini-modeline-r-format '(:eval (doom-modeline-format--minibuffer-line)))

;;   (setq mini-modeline-right-padding 1
;;         mini-modeline-enhance-visual nil)

;;   (set-face-attribute 'mode-line nil :box nil)
;;   (set-face-attribute 'mini-modeline-mode-line nil :background (face-background 'org-code) :height 0.2)
;;   (set-face-attribute 'mini-modeline-mode-line-inactive nil :background (face-background 'fringe) :height 0.2)

;;   :hook (after-init . mini-modeline-mode)
;;   )
#+end_src
#
** UPDATE scroll bar (yascroll)
#+begin_src elisp
(global-yascroll-bar-mode 1)
(setq yascroll-scroll-bar "right-fringe")

;; FIXME disapperaing when not moving
;; TODO increase default fringe width
#+end_src
#
*
** Which key
#+begin_src elisp
;; NOTE i dont really understand...
(after! which-key
(pushnew!
  which-key-replacement-alist
  '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
  '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
  ))
#+end_src
#
* Completion
#+begin_src elisp
(require 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)

(setq company-show-numbers t  ; M-N to use
      company-idle-delay 0)

;; company-math (latex unicode completions)
(add-to-list 'company-backends 'company-math-symbols-unicode)
(setq company-math-allow-latex-symbols-in-faces  t) ;; allow completion in org-mode text

;; TabNine (AI autocomplete)
(require 'company-tabnine)
(add-to-list 'company-backends 'company-tabnine)
#+end_src
#

* Org-roam
** General
See: [[https://www.orgroam.com/manual.html][org-roam manual]]
#+begin_src elisp
;; (add-hook 'after-init-hook 'org-roam-setup)   ; FIXME start on start-up BREAKING CONFIG ON REDOWNLOAD
(setq org-roam-directory "~/org/roam"       ; set org-roam dir
      +org-roam-open-buffer-on-find-file nil
)
#+end_src
#
** Org Roam Capture Templates
#+begin_src elisp
(setq org-roam-capture-templates

;; Default
  `(("d" "default" plain "%?"
    :if-new (file+head "${slug}.org"

"#+title: ${title}
,#+filetags:\n")

    :unnarrowed t)

;; Code Challange
  ("c" "Code Challange" plain "%?"
    :if-new (file+head "CodeChallanges/${slug}.org"

":PROPERTIES:
:Source:
:Difficulty:
:Rating:
:END:
,#+title: ${title}
,#+filetags: :code-challange:

\n* Question
\n** Example
~Input: ~
~Output: ~

\n* [ ] Solution
\n* Testing
\n* Runtime Analysis")

    :unnarrowed t)

;; Debug/Troubleshoot
  ("D" "Debug/Error/Fix-me" plain "%?"
    :if-new (file+head "${slug}.org"

"#+title: ${title}
,#+filetags: :debug:

\n* Problem
\n* TODO Solution")

    :unnarrowed t)

;; Cheatsheet
  ("C" "cheatsheet" plain "%?"
    :if-new (file+head "cheatsheets/${slug}.org"

"#+title: ${title}
,#+filetags: :cheatsheat:\n

| Command | Description |
|---------+-------------|
|         |             |")

    :unnarrowed t)

;; Todo (Kanban)
  ("t" "Todo" plain "%?"
    :if-new (file+head "Todo/${slug}.org"


"#+title: ${title}
,#+filetags:
,#+startup: show2levels
,#+CATEGORY:

\n* DOING
\n* NEXT
\n* TODO
\n* DONE")

    :unnarrowed t)
  )
)
#+end_src
#
** Hide radio-target syntax in node name
#+begin_src elisp
(defun org-link-display-format-h (s)
  "Replace radio links in string S with their description.
If there is no description, use the link target."
  (save-match-data
    (replace-regexp-in-string
     org-radio-target-regexp
     (lambda (m) (or (match-string 2 m) (match-string 1 m)))
     s nil t)))

(advice-add  'org-link-display-format :filter-return 'org-link-display-format-h)
#+end_src
#
** Packages
:PROPERTIES:
:ID:       0a2cd5a0-816a-462f-9e9e-c0b6e92d086d
:END:
*** TODO Org-roam-bibtex (ORB)
#+begin_src elisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref)) ; optional: if Org Ref is not loaded anywhere else, load it here

;;   (setq orb-preformat-keywords
;;       '("citekey" "title" "url" "author-or-editor" "keywords" "file")
;;       orb-process-file-keyword t
;;       orb-file-field-extensions '("pdf"))
;;   ;; (setq orb-preformat-keywords
;;   ;; '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
;;   (setq orb-templates
;;     '(("r" "ref" plain (function org-roam-fapture--get-point)
;;      ""
;;      :file-name "${slug}"
;;      :head "#+TITLE: ${citekey}: ${title}\n#+roam_key: ${ref}\n#+roam_tags:

;; - keywords :: ${keywords}

;; \n* ${title}
;; :PROPERTIES:
;; :Custom_ID: ${citekey}
;; :URL: ${url}
;; :AUTHOR: ${author-or-editor}
;; :NOTER_DOCUMENT: ${file}
;; :NOTER_PAGE:
;; :END:"
;;      :unnarrowed t))))
#+end_src
#
*** UPDATE org-roam-ui
#+begin_src elisp
(use-package! websocket
    :after org-roam)

;; (use-package! org-roam-ui
;;     :after org-roam ;; or :after org
;; ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;; ;;         a hookable mode anymore, you're advised to pick something yourself
;; ;;         if you don't care about startup time, use
;;     ;; :hook (after-init . org-roam-ui-mode)
;;     :config
;;     (setq org-roam-ui-sync-theme t
;;           org-roam-ui-follow t
;;           org-roam-ui-update-on-save t
;;           org-roam-ui-open-on-start t))

(setq org-roam-ui-sync-theme t
      org-roam-ui-follow t
      org-roam-ui-update-on-save t
      org-roam-ui-open-on-start t)
#+end_src
#
* Dired
** peep-dired
#+begin_src elisp
(setq peep-dired-cleanup-eagerly t)
(setq peep-dired-enable-on-directories t)

(evil-define-key 'normal peep-dired-mode-map (kbd "<SPC>") 'peep-dired-scroll-page-down
                                             (kbd "C-<SPC>") 'peep-dired-scroll-page-up
                                             (kbd "<backspace>") 'peep-dired-scroll-page-up
                                             (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)

(setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
#+end_src
#
* Agenda
#+begin_src elisp
;; (custom-set-variables '(org-agenda-files (list "~/org/roam/gcal.org")))
 (setq org-agenda-files '("~/org/roam/gcal.org"))
#+end_src
#
** Clean category column garbage
#+begin_src elisp
(setq org-agenda-prefix-format
      '((agenda . " %i %-12(vulpea-agenda-category)%?-12t% s")
        (todo . " %i %-12(vulpea-agenda-category) ")
        (tags . " %i %-12(vulpea-agenda-category) ")
        (search . " %i %-12(vaulpea-agenda-category) ")))

(defun vulpea-agenda-category ()
  "Get category of item at point for agenda.

Category is defined by one of the following items:

- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" %(vulpea-agenda-category) %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (vulpea-buffer-prop-get "title"))
         (category (org-get-category)))
    (or (if (and
             title
             (string-equal category file-name))
            title
          category)
        "")))

(defun vulpea-buffer-prop-get (name)
  "Get a buffer property called NAME as a string."
  (org-with-point-at 1
    (when (re-search-forward (concat "^#\\+" name ": \\(.*\\)")
                             (point-max) t)
      (buffer-substring-no-properties
       (match-beginning 1)
       (match-end 1)))))
#+end_src
#
** TODO Writeroom Mode
#+begin_src elisp
;; TODO increase font less
;;(setq writeroom-mode-line t)
#+end_src
#
* Calendar
#+begin_src elisp
;; gcal integration
(require 'calfw)
(require 'org-gcal)

(setq org-gcal-client-id "189857002612-bei34shug7gu4ft5ssi5mfedl1kb50u2.apps.googleusercontent.com"
      org-gcal-client-secret "jMCbPjcHaUWrGu02yUVwIi1m"
      org-gcal-fetch-file-alist '(("nathansharp03@gmail.com" .  "~/org/roam/gcal.org")))

                                  ;; ("another-mail@gmail.com" .  "~/task.org")))
;; NOTE: requires gpg (gnupg)

;; Pull into single calender
;; (require 'calfw-cal)
(require 'calfw-ical)
;;(require 'calfw-howm)
(require 'calfw-org)

(defun my-open-calendar ()
  (interactive)
  (cfw:open-calendar-buffer
   :contents-sources
   (list
    (cfw:org-create-source  )  ; orgmode source
    ;; (cfw:cal-create-source "Orange") ; diary source
    ;; (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
    ;; ↓ google calendar ICS
    ;; (cfw:ical-create-source "gcal"
      ;; "https://calendar.google.com/calendar/ical/nathansharp03%40gmail.com/private-5984779a038e5ab68ee283c744922c8a/basic.ics"
      ;; "#339CDB")
)))

(setq package-check-signature nil)

;; duplication of defualt behavior
;; TODO on startup?
;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

#+end_src
#
* Latex
#+begin_src elisp
(setq org-format-latex-options
  (list
        :foreground 'default  ;; or `auto'
        ;; :background 'auto
        :scale 2.8  ;; bigger latex fragment
        ;; :html-foreground "Black"
        ;; :html-background "Transparent"
        ;; :html-scale 1.0
        :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src
#
** [[id:4272fde4-d8c9-4932-af2c-01d2522f7baa][Latex Fragments]]
* Exporting
#+begin_src elisp
(setq org-export-headline-levels 5) ; I like nesting

;; show git version on creator string
(setq org-export-creator-string
      (format "Emacs %s (Org mode %s %s)" emacs-version (org-release) (org-git-version)))
#+end_src
#
* Typescript
#+begin_src elisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

(setq tide-completion-detailed t)
#+end_src
#
** [ ] Move to "langauges"?
* Packages
** Treemacs
#+begin_src elisp
;; (after! treemacs
;;   (setq doom-themes-treemacs-enable-variable-pitch nil)) ; TODO try '
#+end_src
#
** Pdf (tools)
#+begin_src elisp

;; more fine-grained zooming
(setq pdf-view-resize-factor 1.1)

;; Double page spread
(defun my-pdf-view-double-scroll-up-or-next-page (&optional arg)
  "Scroll page up ARG lines if possible, else go to the next page.

When `pdf-view-continuous' is non-nil, scrolling upward at the
bottom edge of the page moves to the next page.  Otherwise, go to
next page only on typing SPC (ARG is nil)."
  (interactive "P")
  (if (or pdf-view-continuous (null arg))
      (let ((hscroll (window-hscroll))
            (cur-page (pdf-view-current-page)))
        (when (or (= (window-vscroll) (image-scroll-up arg))
                  ;; Workaround rounding/off-by-one issues.
                  (memq pdf-view-display-size
                        '(fit-height fit-page)))
          (pdf-view-next-page 2)
          (when (/= cur-page (pdf-view-current-page))
            (image-bob)
            (image-bol 1))
          (set-window-hscroll (selected-window) hscroll)))
    (image-scroll-up arg)))

(defun my-pdf-view-double-scroll-horizontal-view ()
  (interactive)
  (my-pdf-view-double-scroll-up-or-next-page)
  (other-window 1)
  (my-pdf-view-double-scroll-up-or-next-page)
  (other-window 1))

(defun my-pdf-view-double-scroll-vertical-view ()
  (interactive)
  (my-pdf-view-double-scroll-up-or-next-page)
  (shrink-window 1)
  (other-window 1)
  (my-pdf-view-double-scroll-up-or-next-page)
  (enlarge-window 1)
  (other-window 1))
#+end_src
#
** Nov.el
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

;; Font
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)


(setq nov-text-width t)
(setq visual-fill-column-center-text t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)

;; Justified Text
;; ERROR causing chaos with org-noter
(require 'justify-kp)
;; (defun my-nov-window-configuration-change-hook ()
;;   (my-nov-post-html-render-hook)
;;   (remove-hook 'window-configuration-change-hook
;;                'my-nov-window-configuration-change-hook
;;                t))

;; (defun my-nov-post-html-render-hook ()
;;   (if (get-buffer-window)
;;       (let ((max-width (pj-line-width))
;;             buffer-read-only)
;;         (save-excursion
;;           (goto-char (point-min))
;;           (while (not (eobp))
;;             (when (not (looking-at "^[[:space:]]*$"))
;;               (goto-char (line-end-position))
;;               (when (> (shr-pixel-column) max-width)
;;                 (goto-char (line-beginning-position))
;;                 (pj-justify)))
;;             (forward-line 1))))
;;     (add-hook 'window-configuration-change-hook
;;               'my-nov-window-configuration-change-hook
;;               nil t)))

;; (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)
#+end_src
#
** TODO Writeroom Mode
#+begin_src elisp
;; TODO increase font less
;;(setq writeroom-mode-line t)
#+end_src
#
** MAYBE Direnv (Nix)
#+begin_src elisp
;; (use-package direnv
;;  :config
;;  (direnv-mode))
#+end_src
#

** MAYBE Deft
#+begin_src elisp
(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory))
#+end_src
#
** [[id:36686cfd-9aaa-4886-bbfd-c5e64f9e1f67][Org mode packages]]
** [[id:0a2cd5a0-816a-462f-9e9e-c0b6e92d086d][Org-roam packages]]
** Graphviz (dot)
#+begin_src elisp
(use-package! graphviz-dot-mode
  :commands graphviz-dot-mode
  :mode ("\\.dot\\'" "\\.gz\\'")
  ;; correct higlighting in org mode
  :init
  (after! org
    (setcdr (assoc "dot" org-src-lang-modes)
            'graphviz-dot)))

;; ;; TODO Completions
;; (use-package! company-graphviz-dot
;;   :after graphviz-dot-mode)
#+end_src
#
