#+TITLE: Doom Emacs Config
#+AUTHOR: Nathan Sharp (@nazzacode)
#+DESCRIPTION: Nathans Personal Doom Emacs config.
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2

* Table of Contents :toc:
:PROPERTIES:
:UNNUMBERED:
:END:
- [[#user-info][User Info]]
- [[#general][General]]
- [[#ui][UI]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#mode-line-status-bar][Mode Line (Status Bar)]]
  - [[#ligatures][Ligatures]]
- [[#org][Org]]
  - [[#org-babel-src-blocks][Org Babel (src blocks)]]
  - [[#org-roam][~org-roam~]]
  - [[#org-ref][~org-ref~]]
  - [[#org-roam-bibtex-orb][~org-roam-bibtex~ (ORB)]]
  - [[#helm-bibtex][~helm-bibtex~]]
  - [[#org-noter][~org-noter~]]
  - [[#org-pomodoro][~org-pomodoro~]]
- [[#novel][~nov.el~]]
- [[#latex][Latex]]
- [[#gcal][~gcal~]]
- [[#wakatime][~wakatime~]]
- [[#keybindings][Keybindings]]
- [[#misc][Misc]]
- [[#resources][Resources]]
  - [[#httpsdotdoomrgoswamimeconfightml][[[https://dotdoom.rgoswami.me/config.html]]]]

* User Info
#+BEGIN_SRC emacs-lisp
;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; For GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Nathan Sharp"
      my-name "nazzacode"
      user-mail-address "nasharp@outlook.com")
#+END_SRC

* General
Some Sensible Defaults.
#+begin_src elisp
(setq auto-save-default t
      make-backup-files t)
#+end_src

* UI
#+begin_src elisp
(setq display-line-numbers-type 'relative  ;; or `nil'
      header-line-format " ")  ;; header padding

;; TODO Side padding
#+end_src

** Theme
#+BEGIN_SRC elisp tangle: no
(setq doom-theme 'doom-gruvbox)
;; TODO customise my own theme
;; TODO easy switch to light theme!
#+END_SRC

** Fonts
#+BEGIN_SRC elisp
;; `doom-font' and `variable-pitch' are the important ones!

(setq doom-font (font-spec :family "Agave Nerd Font Mono")
;;      doom-unicode-font (font-spec :family "Input Mono Narrow" :size 12)
;;      doom-big-font (font-spec :family "Fira Mono" :size 19))
      doom-variable-pitch-font (font-spec :family "Agave Nerd Font Mono")
;; doom-variable-pitch-font (font-spec :family "ETBookOT")
)

;; Note: `doom-variable-pitch-font' inherits `doom-font's `:size'
#+END_SRC

** TODO Mode Line (Status Bar)
#+begin_src  elisp
(setq doom-modeline-height 15)
#+end_src

** TODO Ligatures

* Org
#+BEGIN_SRC elisp
(after! org
  (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)
  (add-hook! 'org-mode-hook 'org-num-mode) ; numbered headings
  (add-hook 'org-mode-hook 'org-appear-mode)
  (setq org-directory "~/org-roam/"   ; dir for agenda etc.
        org-pretty-entities t         ; unicode/emoji rendering etc.
        org-num-skip-unnumbered t     ; skip `:UNNUMBERED:` from onumbering
        org-ellipsis " ï„‡ "
        org-hide-emphasis-markers t   ; hide bold, italics etc...
        global-org-pretty-table-mode t
        display-line-numbers-type 'nil
        org-fontify-whole-heading-line t  ; ?
        org-fontify-done-headline t
        org-fontify-quote-and-verse-blocks t
        hl-line-mode nil
        org-startup-with-inline-images 'nil))
;;        org-image-actual-width 400

;; TODO
;; (add-hook! 'org-mode-hook 'org-superstar-mode)  ; fancy unicode symbols (e.g headings)

;; Heading Sizes
(custom-set-faces!
  '(outline-1 :weight semi-bold      :height 1.12)
  '(outline-2 :weight semi-bold      :height 1.08)
  '(outline-3 :weight semi-bold      :height 1.05)
  '(outline-4 :weight semi-bold      :height 1.03)
  '(outline-5 :weight normal         :height 1.02)
  '(outline-6 :weight normal         :height 1.01)
  '(outline-7 :weight normal)
  '(outline-8 :weight normal)
  '(org-document-title :height 1.2))


#+END_SRC

** Org Babel (src blocks)
#+begin_src elisp
;; typescript
(org-babel-do-load-languages
  'org-babel-load-languages
    '((typescript . t)))

;; (require 'typescript-mode)
;; (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
;; (require 'tide)


(defun org-babel-execute:typescript (body params)
  (let ((org-babel-js-cmd "npx ts-node < "))
    (org-babel-execute:js body params)))

(defalias 'org-babel-execute:ts 'org-babel-execute:typescript)
#+end_src
** ~org-roam~
See: [[https://www.orgroam.com/manual.html][org-roam manual]]
#+begin_src elisp
(add-to-list 'exec-path "/usr/bin/sqlite3")

(setq org-roam-directory "~/org-roam")  ; set org-roam dir

(add-hook 'after-init-hook 'org-roam-mode) ; start on start-up

(setq org-roam-tag-sources '(prop vanilla all-directories))

#+end_src

** ~org-ref~
#+begin_src emacs-lisp
(require 'doi-utils)

(setq reftex-default-bibliography '("~/org-roam/bibliography.bib"))

;; see org-ref for use of these variables
(setq org-ref-default-bibliography '("~/org-roam/bibliography.bib")
      org-ref-bibliography-notes "~/org-roam/"   ; TODO not in use
      org-ref-pdf-directory "~/org-roam/PDFs/"
      org-ref-completion-library 'org-ref-ivy-cite
      org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
      org-ref-bibliography-notes "~/org-roam"
      org-ref-notes-directory "~/org-roam"
      org-ref-notes-function 'orb-edit-notes)
#+end_src

** ~org-roam-bibtex~ (ORB)
#+begin_src elisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (require 'org-ref) ; optional: if Org Ref is not loaded anywhere else, load it here

  (setq orb-preformat-keywords
      '("citekey" "title" "url" "author-or-editor" "keywords" "file")
      orb-process-file-keyword t
      orb-file-field-extensions '("pdf"))
  ;; (setq orb-preformat-keywords
  ;; '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
            ""
            :file-name "${slug}"
            :head "#+TITLE: ${citekey}: ${title}\n#+roam_key: ${ref}\n#+roam_tags:

- keywords :: ${keywords}

\n* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:END:"
     :unnarrowed t))))
#+end_src
** ~helm-bibtex~
#+begin_src emacs-lisp
(after! org
    (setq bibtex-completion-bibliography "~/org-roam/bibliography.bib"
          bibtex-completion-library-path "~/org-roam/PDFs/"
          bibtex-completion-notes-path "~/org-roam/"))
#+end_src

** ~org-noter~
#+begin_src elisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq org-noter-always-create-frame nil ))  ; stop opening frames
#+end_src

** ~org-pomodoro~
* ~nov.el~
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
* Latex
#+begin_src elisp

;; TODO is this needed?
;;(add-to-list 'org-latex-packages-alist '("" "natbib"))
;;(add-to-list 'org-latex-packages-alist '("" "cleveref"))

;; Latex fragments in org mode
(setq org-format-latex-options
        (list :foreground 'default  ;;auto
              :background 'auto
              :scale 2.2              ;; bigger latex fragments
              :html-foreground "Black"
              :html-background "Transparent"
              :html-scale 1.0
              :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))
#+end_src

* TODO ~gcal~

* TODO ~wakatime~

* Keybindings
#+begin_src elisp
(map! "C-q"  ; Kill previous line
(cmd! (previous-line)
            ; (kill-line)
            (forward-line)))

(map! "M-o" (cmd! (org-noter-insert-note)))  ;; TODO map only in noter

; (map! :localleader "i c" (cmd! (multiple-cursors/evil-mc-toggle-cursor-here)))

;; FIXME  not working
(map! :localleader
      :desc "Cursor (multiple)"
      "i c" #'+multiple-cursors/evil-mc-toggle-cursor-here)
;; TODO natural window resizing
;; TODO template src block (same as last?)

#+END_SRC

* Misc
#+BEGIN_SRC elisp
(setq lisp-indent-offset 2)
#+END_SRC

* Resources
** [[https://dotdoom.rgoswami.me/config.html]]
